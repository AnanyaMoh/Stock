package stock;

import java.util.HashMap;
import java.util.Map;

public class Portfolio {
    private Map<Stock, Integer> stockHoldings;
    private double cashBalance;

    public Portfolio(double initialBalance) {
        this.stockHoldings = new HashMap<>();
        this.cashBalance = initialBalance;
    }

    // Method to buy stock
    public boolean buyStock(Stock stock, int quantity) {
        double totalCost = stock.getCurrentPrice() * quantity;
        if (cashBalance >= totalCost) {
            stockHoldings.put(stock, stockHoldings.getOrDefault(stock, 0) + quantity);
            cashBalance -= totalCost;
            return true;
        } else {
            System.out.println("Insufficient balance to buy " + quantity + " shares of " + stock.getSymbol());
            return false;
        }
    }

    // Method to sell stock
    public boolean sellStock(Stock stock, int quantity) {
        if (stockHoldings.containsKey(stock) && stockHoldings.get(stock) >= quantity) {
            double totalValue = stock.getCurrentPrice() * quantity;
            stockHoldings.put(stock, stockHoldings.get(stock) - quantity);
            cashBalance += totalValue;
            return true;
        } else {
            System.out.println("Not enough shares to sell " + quantity + " shares of " + stock.getSymbol());
            return false;
        }
    }

    // Display portfolio details
    public void displayPortfolio() {
        System.out.println("Your Portfolio:");
        double totalStockValue = 0;
        for (Map.Entry<Stock, Integer> entry : stockHoldings.entrySet()) {
            Stock stock = entry.getKey();
            int quantity = entry.getValue();
            double stockValue = stock.getCurrentPrice() * quantity;
            totalStockValue += stockValue;
            System.out.println(quantity + " shares of " + stock.getSymbol() + " at $" + stock.getCurrentPrice() + " = $" + stockValue);
        }
        System.out.println("Total Stock Value: $" + totalStockValue);
        System.out.println("Cash Balance: $" + cashBalance);
        System.out.println("Total Portfolio Value: $" + (totalStockValue + cashBalance));
    }

    public double getCashBalance() {
        return cashBalance;
    }

    public void addCash(double amount) {
        cashBalance += amount;
    }
}
package stock;

public class Stock {
    private String symbol;
    private String name;
    private double currentPrice;

    public Stock(String symbol, String name, double currentPrice) {
        this.symbol = symbol;
        this.name = name;
        this.currentPrice = currentPrice;
    }

    public String getSymbol() {
        return symbol;
    }

    public String getName() {
        return name;
    }

    public double getCurrentPrice() {
        return currentPrice;
    }

    // Simulate a random price change between -5% and +5%
    public void simulatePriceChange() {
        double changePercent = (Math.random() - 0.5) * 0.10; // -5% to +5%
        currentPrice += currentPrice * changePercent;
    }

    @Override
    public String toString() {
        return symbol + " (" + name + ") - $" + String.format("%.2f", currentPrice);
    }
}
package stock;

import java.io.IOException;
import java.util.Scanner;

public class StockTradingApp {
    public static void main(String[] args) throws IOException
    {
        TradingSystem tradingSystem = new TradingSystem();
        Scanner scanner = new Scanner(System.in);
        String command;

        System.out.println("Welcome to the Stock Trading Simulation!");
        while (true) {
            System.out.println("\nEnter a command (market, buy, sell, portfolio, simulate, exit):");
            command = scanner.nextLine();

            if (command.equalsIgnoreCase("market")) {
                tradingSystem.displayMarketData();
            } else if (command.equalsIgnoreCase("buy")) {
                System.out.println("Enter stock symbol and quantity (e.g., AAPL 10):");
                String[] input = scanner.nextLine().split(" ");
                tradingSystem.buyStock(input[0], Integer.parseInt(input[1]));
            } else if (command.equalsIgnoreCase("sell")) {
                System.out.println("Enter stock symbol and quantity (e.g., AAPL 5):");
                String[] input = scanner.nextLine().split(" ");
                tradingSystem.sellStock(input[0], Integer.parseInt(input[1]));
            } else if (command.equalsIgnoreCase("portfolio")) {
                tradingSystem.trackPortfolioPerformance();
            } else if (command.equalsIgnoreCase("simulate")) {
                tradingSystem.simulateMarketChange();
            } else if (command.equalsIgnoreCase("exit")) {
                System.out.println("Exiting the simulation.");
                break;
            } else {
                System.out.println("Invalid command!");
            }
        }
        scanner.close();
    }
}
package stock;

import java.util.ArrayList;
import java.util.List;

public class TradingSystem {
    private List<Stock> market;
    private Portfolio portfolio;

    public TradingSystem() {
        portfolio = new Portfolio(10000); // Starting with $10,000 balance
        market = new ArrayList<>();

        // Initialize some stocks
        market.add(new Stock("AAPL", "Apple", 150));
        market.add(new Stock("GOOGL", "Google", 2800));
        market.add(new Stock("AMZN", "Amazon", 3500));
        market.add(new Stock("TSLA", "Tesla", 900));
    }

    // Display current market data
    public void displayMarketData() {
        System.out.println("Market Data:");
        for (Stock stock : market) {
            System.out.println(stock);
        }
    }

    // Buy stock
    public void buyStock(String symbol, int quantity) {
        Stock stock = findStockBySymbol(symbol);
        if (stock != null) {
            portfolio.buyStock(stock, quantity);
        } else {
            System.out.println("Stock not found.");
        }
    }

    // Sell stock
    public void sellStock(String symbol, int quantity) {
        Stock stock = findStockBySymbol(symbol);
        if (stock != null) {
            portfolio.sellStock(stock, quantity);
        } else {
            System.out.println("Stock not found.");
        }
    }

    // Track portfolio performance
    public void trackPortfolioPerformance() {
        portfolio.displayPortfolio();
    }

    // Simulate market change
    public void simulateMarketChange() {
        for (Stock stock : market) {
            stock.simulatePriceChange();
        }
        System.out.println("Market prices updated.");
    }

    // Helper method to find a stock by its symbol
    private Stock findStockBySymbol(String symbol) {
        for (Stock stock : market) {
            if (stock.getSymbol().equalsIgnoreCase(symbol)) {
                return stock;
            }
        }
        return null;
    }
}
